class Deck{
  hand;  //5 random cards
  cardValue = {"2":2, "3":3, "4":4, "5":5, "6":6, "7":7, "8":8, "9":9, "10":10, "Jack":11, "Queen":12, "King":13, "Ace":14};
  rank = {'Royal Flush!': 10, 'Straight Flush!':9,'Four of a kind!': 8, 'Full house!': 7, 'Flush!': 6, 'Straight!': 5, 'Three of a kind!': 4, 'Two Pairs!': 3, 'One Pair!': 2, "Hight card!": 1};
  Card = class{
    constructor(suit, cardRank){
      this.suit = suit;
      this.cardRank = cardRank
    }
  };
createDeck(){  // Create 52 card deck and hand
    const suits = ["clubs","diamonds","hearts","spades"];
    const deck = suits.flatMap(e => Object.keys(this.cardValue).map(el => new this.Card(e, el))); // 52 card deck
    this.hand = deck.slice(0,5).flatMap(() => deck.splice(Math.floor(Math.random()*(deck.length)),1)); // 5 cards
    this.hand.sort((a,b) => this.cardValue[a.cardRank] - this.cardValue[b.cardRank]);
    return this.hand
}
result(){  // Check all ranks
    let truth = 0, win;
    const colors = this.hand.every(e => e.suit === this.hand[0].suit);
    const value1 = this.hand.map(e => e.cardRank);
    const straight = value1.join(',');
    const value2 = [...new Set(value1)].map(el => value1.filter(e => e === el)).sort((a,b) => a.length - b.length);
    for(let i = 0; i <= 3; i++){
        (this.cardValue[this.hand[i].cardRank] - this.cardValue[this.hand[i+1].cardRank] === -1) ? truth++:null;
      }
       if(this.cardValue[this.hand[0].cardRank] === 10 && truth === 4  && colors) win = 'Royal Flush!'
          else if(truth === 4  && colors) win = `Straight Flush - Flush of: ${this.hand[0].suit} and Straight of: ${straight}`
          else if(value2.length === 2 && value2.some(e => e.length === 4)) 
          win = `Four kind of: ${value2[value2.length-1][0]}`
          else if(value2.length === 2 && value2.some(e => e.length === 3))
          win = `Full house - Three kind of: ${value2[value2.length-1][0]} and Two kind of: ${value2[0][0]}`
          else if(colors) win = `Flush of: ${this.hand[0].suit}`
          else if(truth === 4) win = `Straight of: ${straight}`    
          else if(value2.length === 3 && value2.some(e => e.length === 3)) 
          win = `Three kind of a: ${value2[value2.length-1][0]}`
          else if(value2.length === 3 && value2.some(e => e.length === 2)) 
          win = `Two pairs of: ${value2[value2.length-1][0]} and ${value2[1][0]}`
          else if(value2.length === 4) win = `Pair of: ${value2[value2.length-1][0]}`
          else if(value2.length === 5) win = `Hight card! : ${this.hand[this.hand.length -1].cardRank}`    
          return win         
    }
}
const poker = new Deck();
console.log(poker.createDeck());
console.log(poker.result());